require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/api/v1/buildings", type: :request do
  let(:client) { create(:client) }
  # This should return the minimal set of attributes required to create a valid
  # Building. As you add validations to Building, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    attrs = attributes_for(:building, client_id: client.id)
    attrs.delete(:client)
    attrs
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # BuildingsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {
      'Content-Type': 'application/json'
    }
  }

  describe "GET /index" do
    subject(:get_index) { get api_v1_buildings_url, headers: valid_headers, as: :json }

    let!(:building) { create(:building, client_id: client.id) }
    let!(:custom_enum_fields) { create_list(:custom_enum_field, 2, client: client) }
    let!(:custom_enum_field_choices) { custom_enum_fields.map { |field| create_list(:custom_enum_field_choice, 2, custom_enum_field: field) } }
    let!(:custom_enum_field_values) { custom_enum_field_choices.map { |choice| create(:custom_enum_field_value, 2, custom_enum_field_choice: choice) } }
    let!(:custom_number_fields) { create_list(:custom_number_field, 2, client: client) }
    let!(:custom_number_field_values) { custom_number_fields.map { |field| CustomNumberFieldValue.create!(value: Faker::Number.number, custom_number_field: field, building: building) } }
    let!(:custom_freeform_fields) { create_list(:custom_freeform_field, 2, client: client) }
    let!(:custom_freeform_field_values) { custom_freeform_fields.map { |field| CustomFreeformFieldValue.create!(value: Faker::Adjective.positive, custom_freeform_field: field, building: building) } }

    it "renders a successful response" do
      get_index

      expect(response).to be_successful
    end

    it "has a status flag" do
      get_index

      expect(JSON.parse(response.body)).to include('status' => true)
    end

    it "has an array of buildings" do
      get_index

      expect(JSON.parse(response.body)).to include(
        'buildings' => include(
          include(
            'id' => building.id,
            'client_name' => building.client.name,
            # TODO: One-line address like in requirements
            'address1' => building.address1,
            'address2' => building.address2,
            'city' => building.city,
            'state' => building.state,
            'zip' => building.zip
          )
        )
      )
    end

    it "includes custom fields in the buildings" do
      get_index

      expect(JSON.parse(response.body)).to include(
        'buildings' => include(
          include(

          )
        )
      )
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      building = Building.create! valid_attributes
      get api_v1_building_url(building), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Building" do
        expect {
          post api_v1_buildings_url,
               params: { building: valid_attributes }, headers: valid_headers, as: :json
        }.to change(Building, :count).by(1)
      end

      it "renders a JSON response with the new building" do
        post api_v1_buildings_url,
             params: { building: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Building" do
        expect {
          post api_v1_buildings_url,
               params: { building: invalid_attributes }, as: :json
        }.to change(Building, :count).by(0)
      end

      it "renders a JSON response with errors for the new building" do
        post api_v1_buildings_url,
             params: { building: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        attrs = attributes_for(:building, client_id: client.id)
        attrs.delete(:id)
        attrs.delete(:client)
        attrs
      }

      it "updates the requested building" do
        building = Building.create! valid_attributes
        patch api_v1_building_url(building),
              params: { building: new_attributes }, headers: valid_headers, as: :json
        building.reload
        skip("Add assertions for updated state")
      end

      it "renders a JSON response with the building" do
        building = Building.create! valid_attributes
        patch api_v1_building_url(building),
              params: { building: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the building" do
        building = Building.create! valid_attributes
        patch api_v1_building_url(building),
              params: { building: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested building" do
      building = Building.create! valid_attributes
      expect {
        delete api_v1_building_url(building), headers: valid_headers, as: :json
      }.to change(Building, :count).by(-1)
    end
  end
end
